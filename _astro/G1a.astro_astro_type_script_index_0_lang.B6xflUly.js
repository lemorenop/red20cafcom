import{B as l}from"./BarChart.KOKhGWM3.js";import{g as u}from"./colors.DR0mxEkc.js";import"./BaseChart.BPIYNeR_.js";class g extends l{PROGRESS_LABELS={trendMovingAwayFromGoal:"La tendencia se aleja de la meta",correctTrendButProgressTooSlow:"La tendencia es la correcta, pero el avance es demasiado lento para alcanzar la meta",goalAchievedOrLikelyToAchieve:"La meta se alcanzó o es probable que se alcance con la tendencia actual"};DEFAULT_REGION="América Latina y el Caribe";setupControls(){this.setupRegionSelect()}setupRegionSelect(){const t=[...new Set(this.rawData.map(e=>e.region))].sort();this.regionSelect=this.container.querySelector("#region-select"),this.regionSelect&&(t.forEach(e=>{const a=document.createElement("option");a.value=this.t(e),a.textContent=this.t(e),this.regionSelect.appendChild(a)}),this.regionSelect.value=this.t(this.DEFAULT_REGION),this.regionSelect.addEventListener("change",()=>this.updateChart()))}updateChart(){const t=this.regionSelect.value;if(t){const e=this.getDataByRegion(t);this.chart.data.labels=this.createLabels(e),this.chart.data.datasets=this.createDatasets(e),this.chart.update()}}getDataByRegion(t){return this.rawData.filter(e=>e.region==t).sort((e,a)=>parseInt(e.sdgNumber)-parseInt(a.sdgNumber))}calculateSDGCounts(t,e){const a={correctTrendButProgressTooSlow:0,goalAchievedOrLikelyToAchieve:0,trendMovingAwayFromGoal:0,insufficientData:0};t.filter(s=>parseInt(s.sdgNumber)===e).forEach(s=>{Object.keys(a).filter(n=>s[n]!==null).forEach(n=>a[n]++)});const r=Object.entries(a).reduce((s,[n,c])=>s+(n==="insufficientData"?0:c),0);return{progressCounts:a,totalValidDataPoints:r}}getProgressBySDG(t){const e={};for(let a=1;a<=17;a++){const{progressCounts:r,totalValidDataPoints:s}=this.calculateSDGCounts(t,a);e[a]={progressCounts:r,totalValidDataPoints:s,percentagePerUnit:100/s}}return e}getUniqueOrderedSDGs(t){const e=new Map;return t.forEach(r=>{e.set(r.sdgNumber,{sdgNumber:r.sdgNumber,sdgName:r.sdgName})}),Array.from(e.values()).sort((r,s)=>parseInt(r.sdgNumber)-parseInt(s.sdgNumber))}calculateDatasetValues(t,e){return Object.values(t).map(a=>a.progressCounts[e]*a.percentagePerUnit)}createDatasets(t){const e=this.getProgressBySDG(t);return Object.entries(this.PROGRESS_LABELS).map(([a,r],s)=>({label:this.t(r),data:this.calculateDatasetValues(e,a),backgroundColor:u(s)}))}createLabels(t){return this.getUniqueOrderedSDGs(t).map(e=>e.sdgName)}getData(){const t=this.getDataByRegion(this.t(this.DEFAULT_REGION));return{labels:this.createLabels(t),datasets:this.createDatasets(t)}}getOptions(){return this.mergeOptions(super.getOptions(),{indexAxis:"y",scales:{x:{stacked:!0,min:0,max:100,ticks:{callback:this.ticksAsPercentage()}},y:{stacked:!0,ticks:{autoSkip:!1}}},plugins:{tooltip:{mode:"index",labelAsPercentage:!0,labelAxis:"x"}}})}}function i(){try{new g("C1-G1a")}catch{}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",i):i();
